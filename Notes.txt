Design questions
How to link to airflow?
- scheduled (daily, monthly) starts 
- can we loop within loops?
- initialize with information from database
- strategies monitored for alpha to determine alpha pool and calcuate strategy_statistics
- State is timestamped, indexed (to object?) data held in the database accessible via API
- State represents current information known

Operating model
- batch: periodically run to find best decision policies then run best policy
- online: updating and running policies at the same time
    - current State, S_0, will be in database 
        - perhaps we need an initialization function for new strategies
    - simulate forward to horizon, T 
        - get decisions for current actions 
        - update State 
        - tune parameters for some policies
        - possibly update decision policies

Main loop
- daily
    - for each strategy:
        - input: latest strategy returns and strategy_availability from exogenous data
        - run: parameter_inference (pymc3) to learn strategy model/parameters
        - run: forward_simulation - one month 
        - update: strategy_statistics into State
        - decision: strategy inclusion in global_alpha_pool
        - action: update global_alpha_pool
    - for each solution:
        - input: State
        - run: update solution_alpha_pool
        - decision: 
        - action: 

Strategies will be instances of strategy class
Solutions will be instances of solution class
Firm will be an instance of firm class

State as database 
- strategy_data for each strategy
    - returns_history
    - model_parameters
    - strategy_statistics (risk and performance)
    - alpha_level

- solution_data for each solution
    - objective_function
        - parameters
        - constraints (e.g. asset class, ...)
    - AUM
    - weights_history
    - solution_alpha_pool


- firm_data
    - costs, revenues


Each class will have
- decision_function that returns a decision, X(S_t) -> x_t
- exog_info_function for sourcing or simulating exogenous data, W_{t+1}
- objective_function (contributions) for finding the best decision policy X^{\pi} from X
- transition function to update State and save to database, S^M(S_t, x_t, W_{t+1}) -> S_{t+1}
- 

Main loop
- define set of policies to search over X
- initialize Model with S_0 and policies, X
- loop over policy, X in policies, X^{\pi}
    - Model object loops from t = 0 to t = T
        - get decision, x_t from X(S_t)
        - simulate or source next W_t
        - calculate contribution, C(S_t, x_t, W_{t+1})
        - sum and save contribution
        - get next state, S_{t+1}, from State transitions (S_{t+1} = S^M(S_t, x_t, W_{t+1}))
- select policy that maximises sum of contributions over time

Decision Policy class (S_t)
""" First define the decisions
    choose decision class: PFA, CFA, VFA, DLA or hybrid"""
- decision method (X^{\pi}(S_t) -> x_t)
- returns x_t

State class (S_t, x_t, W_{t+1})
""" All information on costs, rewards, constraints, transition function """
- initialization (S_0)
- variables ()
- transition method (S_{t+1} = S^M(S_t, x_t, W_{t+1}))
    - parameter_inference (pymc3) to learn strategy model/parameters
    - forward_simulation - one period
- returns S_{t+1}

Exog_Info class ()
""" new information arriving after time, t """
- simulate method(W_t -> W_{t+1}) or  
- source new exog_info W_{t+1}
- returns W_{t+1}

Model class (S_t, x_t, W_{t+1})
""" steps through process """
- contribution method (C(S_t, x_t, W_{t+1}))
- sums and stores contributions
- returns sum


Strategy Level
description: model strategy and find policy for decide whether strategy offers 
persistent alpha and should stay in alpha_pool

- decision_period: day
- Decisions (x_t)
    - alpha exists -> in_alpha_pool
    - no alpha -> not_in_alpha_pool

- State variables (S_t)
    - attributes
        - available_strategies
        - strategy_daily returns_history
        - monthly_valley
        - alpha
        - strategy_statistics (for Solution Level)
    - methods
        - transition_function
        - update_strategy_statistics

- Exog_Info (W_{t+1})
    - strategy_daily_return
    - strategy_availability
 
Solution Level
description: solution management policy including selecting strategies from the
alpha pool, allocating capital to strategies, pausing or stopping strategies to
achieve solution objecives  

- decision_period: day
- Decisions
    - select strategies for solution
    - allocations for solution
    - manage 
        - pause, say if cum_P&L < monthly_valley -> pause for pause_period
        - remove strategy from available_strategies_list

- State variables
    - available_strategies_list
    - strategy_statistics
    - strategy AUM
    - score

- Exog_Info
    - market_regime

Firm Level
""" visualize firm statistics: revenue, cost and profit projections
     """
- Decisions
    - initiate solution 

- State variables
    - 

- Exog_Info
    - 